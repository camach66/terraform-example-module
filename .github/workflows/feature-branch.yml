name: Feature Branch
on:
  pull_request:
    branches: [ 'main' ]
    types: [opened, synchronize, reopened, closed, labeled, unlabeled]

permissions:
  pull-requests: write
  deployments: write
  id-token: write
  contents: read

jobs:
  find-terraform-directories:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: set-matrix
        run: |
          matrix=$(find ./ -name '*.tf' \
            -not -path '*/.terraform/*' \
            -exec dirname {} \; \
            | sort \
            | uniq \
            | jq --raw-input --slurp 'split("\n")| map(select(. != ""))')
          echo "matrix=$(echo $matrix)" >> $GITHUB_OUTPUT
    outputs:
      tfdirs_matrix: ${{ steps.set-matrix.outputs.matrix }}

  tflint:
    runs-on: ubuntu-latest
    needs: find-terraform-directories
    strategy:
      fail-fast: false
      matrix:
        tfdir: ${{ fromJson(needs.find-terraform-directories.outputs.tfdirs_matrix) }}
    env:
      TFLINT_PLUGIN_DIR: ${{ github.workspace }}/.tflint.d/plugins
      TFLINT_PLUGINS: aws
      TFLINT_CACHE_VER: 1 # Increment this to force a cache refresh
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2

      - run: terraform init
        working-directory: ${{ matrix.tfdir }}

      - name: cache tflint plugins
        id: cache-plugins
        uses: actions/cache@v3
        with:
          path: ${{ env.TFLINT_PLUGIN_DIR }}
          key: tflint-plugins-${{ env.TFLINT_CACHE_VER }}

      - name: tflint
        uses: reviewdog/action-tflint@v1.17.0
        with:
          reporter: "github-pr-review"
          filter_mode: nofilter
          fail_on_error: true
          tflint_rulesets: ${{ env.TFLINT_PLUGINS }}
          tflint_init: true
          working_directory: ${{ matrix.tfdir }}

#  default:
#    uses: cloudposse/github-actions-workflows-terraform-module/.github/workflows/feature-branch.yml@main
#    with:
#      organization: "${{ github.event.repository.owner.login }}"
#      repository: "${{ github.event.repository.name }}"
#      open: ${{ github.event.pull_request.state == 'open' }}
#      labels: ${{ toJSON(github.event.pull_request.labels.*.name) }}
#      ref: ${{ github.event.pull_request.head.ref  }}
#    secrets:
#      github-private-actions-pat: "${{ secrets.PUBLIC_AND_PRIVATE_REPO_ACCESS_TOKEN }}"
#      registry: "${{ secrets.ECR_REGISTRY }}"
#      secret-outputs-passphrase: "${{ secrets.GHA_SECRET_OUTPUT_PASSPHRASE }}"
#      ecr-region: "${{ secrets.ECR_REGION }}"
#      ecr-iam-role: "${{ secrets.ECR_IAM_ROLE }}"
